def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
apply plugin: 'com.google.gms.google-services'
android {
    compileSdkVersion 29

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "intelligent.fun_refresh"
        minSdkVersion 23
        targetSdkVersion 29
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            ndk {
                abiFilters "armeabi-v7a"
            }
            // 为发布版本添加您自己的签名配置。
            // 现在使用调试键进行签名，使用命令`flutter run --release`，将调试签名当做发布签名
            signingConfig signingConfigs.debug
            debug {
                ndk {
                    //这里要加上，否则debug包会出问题,后面三个为可选，x86建议加上不然部分模拟器回报错
                    abiFilters "armeabi", "armeabi-v7a", "arm64-v8a",  "x86"
                }
            }
        }
    }


    /*
buildTypes {
     release {
         ndk{
             abiFilters "armeabi-v7a"
         }
     }
     debug {
         ndk {
             //这里要加上，否则debug包会出问题,后面三个为可选，x86建议加上不然部分模拟器回报错
             abiFilters "armeabi", "armeabi-v7a", "arm64-v8a",  "x86"
         }
     }
 }
    */
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation 'com.google.firebase:firebase-core:16.0.9'
    // api 'com.google.firebase:firebase-ads:17.0.0'
    implementation 'com.google.android.gms:play-services-ads:17.2.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}
